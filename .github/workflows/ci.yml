name: Continuous Integration

on:
  schedule:
    - cron: 12 9 * * *
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test-javascript:
    name: JavaScript Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        env:
          JEST_TEST_TIMEOUT: 30000 # 设置超时时间为 30 秒
        run: npm run ci-test

  test-dev:
    name: test-dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-install
        run: npm install

      - name: run local dev script
        id: local-dev
        run: npx local-action . src/main.js .env.example

  test-container:
    name: test-container
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: run local dev script
        id: local-dev
        run: |
          docker build -t ghcr.io/samyuan1990/openai_codeagent-action:latest .
          docker run -v "$(pwd)":/workdir \
           ghcr.io/samyuan1990/openai_codeagent-action:latest ls /workdir 
          docker run -e baseURL="https://api.deepseek.com" \
           -e apiKey="dummy" \
           -e model="deep-seek" \
           -e dirPath="/workdir/src" \
           -e dryRun="true" \
           -e runType="jsunittest" \
           -e maxIterations=1 \
           -v "$(pwd):/workdir:rw" \
           ghcr.io/samyuan1990/openai_codeagent-action:latest
           ls $(pwd)
           ls $(pwd)/GenAI_output
           cat $(pwd)/GenAI_output/summary.json

  test-godoc:
    name: GitHub Actions Test
    needs: test-container 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22.x
      - name: Install dependencies
        run: |
          command -v ginkgo || go install github.com/onsi/ginkgo/v2/ginkgo@${{ env.GINKGO_VERSION }}
      - name: unittest
        id: unittest
        run: |
          make test PROFILE=y
          wget https://raw.githubusercontent.com/SamYuan1990/OpenAI_CodeAgent-action/refs/heads/main/goASTBin -O ./goASTBin && chmod a+x ./goASTBin
      - name: use this action to generate unit test
        id: Lint_with_LLM
        uses: SamYuan1990/OpenAI_CodeAgent-action@main
        with:
          baseURL: https://api.deepseek.com
          apiKey: dummy
          model: deepseek-chat
          dirPath: '/workdir'
          maxIterations: 1
          runType: godoc
          dryRun: true
      - name: output check
        shell: bash
        run: |
          echo '${{ steps.test-action.outputs.LLMresponse }}'
          echo '${{ steps.test-action.outputs.final_prompt }}'
          echo '${{ steps.test-action.outputs.avg_prompt_precent }}'
          echo '${{ steps.test-action.outputs.avg_content_precent }}'

  test-jsunittest:
    name: GitHub Actions Test
    needs: test-container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Test Local Action
        id: test-action
        uses: ./
        with:
          baseURL: https://api.deepseek.com
          apiKey: dummy
          model: deepseek-chat
          dirpath: './src'
          maxIterations: 1
          dryRun: true
          runType: jsunittest
      - name: output check
        shell: bash
        run: |
          echo '${{ steps.test-action.outputs.LLMresponse }}'
          echo '${{ steps.test-action.outputs.final_prompt }}'
          echo '${{ steps.test-action.outputs.avg_prompt_precent }}'
          echo '${{ steps.test-action.outputs.avg_content_precent }}'

  test-ccodescan:
    name: GitHub Actions Test
    needs: test-container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          repository: SamYuan1990/cJSON
      - name: use this action to generate suggestion for deployment settings
        id: Lint_with_LLM
        uses: SamYuan1990/OpenAI_CodeAgent-action@main
        with:
          baseURL: https://api.deepseek.com
          apiKey: dummy
          model: deepseek-chat
          dirpath: '/workdir'
          runType: ccodescan
          maxIterations: 1
          dryRun: true
      - name: output check
        shell: bash
        run: |
          echo '${{ steps.test-action.outputs.LLMresponse }}'
          echo '${{ steps.test-action.outputs.final_prompt }}'
          echo '${{ steps.test-action.outputs.avg_prompt_precent }}'
          echo '${{ steps.test-action.outputs.avg_content_precent }}'

  test-cvetodeployment:
    name: GitHub Actions Test
    needs: test-container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          repository: SamYuan1990/kepler
      - uses: actions/setup-go@v5
      - name: generate CVE.json
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b ./
          go install github.com/devops-kung-fu/bomber@latest 
          ./syft scan . -o cyclonedx-json -vv  > sbom.json 
          cat sbom.json
          bomber scan ./sbom.json --output=json --debug > cve.json
          cat cve.json
      - name: use this action to generate suggestion for deployment settings
        id: Lint_with_LLM
        uses: SamYuan1990/OpenAI_CodeAgent-action@main
        with:
          baseURL: https://api.deepseek.com
          apiKey: dummy
          model: deepseek-chat
          dirpath: './'
          deploymentfile: ./manifests/k8s/config/exporter/exporter.yaml
          runType: CVE2Deployment
          dryRun: true
      - name: output check
        shell: bash
        run: |
          echo '${{ steps.test-action.outputs.LLMresponse }}'
          echo '${{ steps.test-action.outputs.final_prompt }}'
          echo '${{ steps.test-action.outputs.avg_prompt_precent }}'
          echo '${{ steps.test-action.outputs.avg_content_precent }}'