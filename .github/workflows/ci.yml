name: Continuous Integration

on:
  schedule:
    - cron: 12 9 * * *
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions: write-all

jobs:
  test-javascript:
    name: JavaScript Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        env:
          JEST_TEST_TIMEOUT: 30000 # 设置超时时间为 30 秒
        run: npm run ci-test

  test-dev:
    name: test-dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-install
        run: npm install

      - name: Install Dependencies
        id: npm-ci
        run: npm install && npx jest --coverage && cp -r coverage src

      - name: run local dev script
        id: local-dev
        run: npx local-action . src/main.js .env.example

  test-container:
    name: test-container
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Dependencies
        id: npm-ci
        run: npm install && npx jest --coverage && cp -r coverage src

      - name: run local dev script
        id: local-dev
        run: |
          docker build -t ghcr.io/samyuan1990/openai_codeagent-action:latest .
          docker run -v "$(pwd)":/workdir \
           ghcr.io/samyuan1990/openai_codeagent-action:latest ls /workdir 
          docker run -e baseURL="https://api.deepseek.com" \
           -e apiKey="dummy" \
           -e model="deep-seek" \
           -e dirPath="/workdir/src" \
           -e dryRun="true" \
           -e runType="jsunittest" \
           -e maxIterations=1 \
           -e githubIssueReport=true \
           -e token=${{ github.token }} \
           -e GITHUB_REPOSITORY="${{ github.repository }}" \
           -v "$(pwd):/workdir:rw" \
           ghcr.io/samyuan1990/openai_codeagent-action:latest
           ls $(pwd)
           ls $(pwd)/GenAI_output
           cat $(pwd)/GenAI_output/summary.json
      - name: dummy run for action scripts
        shell: bash
        run: |
          ls $(pwd)
          ls $(pwd)/GenAI_output
          VALUE=$(jq -r '.LLMresponse | gsub("\n"; " ")' $(pwd)/GenAI_output/summary.json)
          echo "LLMresponse=${VALUE}"
          VALUE=$(jq -r '.final_prompt | gsub("\n"; " ")' $(pwd)/GenAI_output/summary.json)
          echo "final_prompt=${VALUE}"
          VALUE=$(jq -r -e .avg_prompt_precent $(pwd)/GenAI_output/summary.json)
          echo "avg_prompt_precent=${VALUE}"
          VALUE=$(jq -r -e .avg_content_precent $(pwd)/GenAI_output/summary.json)
          echo "avg_content_precent=${VALUE}"
          VALUE=$(jq -r -e .avg_time_usage $(pwd)/GenAI_output/summary.json)
          echo "avg_time_usage=${VALUE}"
          VALUE=$(jq -r -e .avg_inputToken $(pwd)/GenAI_output/summary.json)
          echo "avg_inputToken=${VALUE}"
          VALUE=$(jq -r -e .avg_outputToken $(pwd)/GenAI_output/summary.json)
          echo "avg_outputToken=${VALUE}"

  test-godoc:
    name: test-godoc
    needs: test-container
    uses: ./.github/workflows/goDoc.yml
    with:
      dryrun: true
      build_image: true

  test-jsunittest:
    name: test-jsunittest
    needs: test-container
    uses: ./.github/workflows/jsunittest.yml
    with:
      dryrun: true
      build_image: true

  test-ccodescan:
    name: test-ccodescan
    needs: test-container
    uses: ./.github/workflows/cScan.yml
    with:
      dryrun: true
      build_image: true

  test-ccodescanbrpc:
    name: test-ccodescan
    needs: test-container
    uses: ./.github/workflows/cScanbrpc.yml
    with:
      dryrun: true
      build_image: true

  test-cvetodeployment:
    name: test-cvetodeployment
    needs: test-container
    uses: ./.github/workflows/CVE_to_Deployment.yml
    with:
      dryrun: true
      build_image: true

  test-kubeedgecvetodeployment-image:
    name: test-kubeedgecvetodeployment
    needs: test-cvetodeployment
    uses: ./.github/workflows/CVE_to_Deployment_demo.yml
    with:
      dryrun: true
      build_image: true

  test-consolecvetodependency:
    name: test-consolecvetodependency
    needs: test-cvetodeployment
    uses: ./.github/workflows/CVE_Dependency.yml
    with:
      dryrun: true
      build_image: true
